/* -----------------------------------------------------------------------------
 *
 * (c) The GHC Team, 1998-2004
 *
 * Code to perform updates.
 *
 * This file is written in a subset of C--, extended with various
 * features specific to GHC.  It is compiled by GHC directly.  For the
 * syntax of .cmm files, see the parser in ghc/compiler/cmm/CmmParse.y.
 *
 * ---------------------------------------------------------------------------*/


#include "Cmm.h"
#include "rts/prof/LDV.h"

#include "Updates.h"

#if defined(PROFILING)
#define UPD_FRAME_PARAMS W_ unused1, W_ unused2, P_ unused3
#else
#define UPD_FRAME_PARAMS P_ unused1
#endif

/* The update fragment has been tuned so as to generate good
   code with gcc, which accounts for some of the strangeness in the
   way it is written.  

   In particular, the JMP_(ret) bit is passed down and pinned on the
   end of each branch (there end up being two major branches in the
   code), since we don't mind duplicating this jump.
*/

/* on entry to the update code
   (1) R1 points to the closure being returned
   (2) Sp points to the update frame
*/

INFO_TABLE_RET( stg_upd_frame, UPDATE_FRAME, UPD_FRAME_PARAMS)
{
    W_ updatee;
    
    updatee = StgUpdateFrame_updatee(Sp);

    /* remove the update frame from the stack */
    Sp = Sp + SIZEOF_StgUpdateFrame;
    
    /* ToDo: it might be a PAP, so we should check... */
    TICK_UPD_CON_IN_NEW(sizeW_fromITBL(%GET_STD_INFO(updatee)));
    
    updateWithIndirection(updatee,
                          R1,
                          jump %ENTRY_CODE(Sp(0)) [R1]);
}


INFO_TABLE_RET( stg_marked_upd_frame, UPDATE_FRAME, UPD_FRAME_PARAMS)
{
    W_ updatee, v, i, tso, link;

    // we know the closure is a BLACKHOLE
    updatee = StgUpdateFrame_updatee(Sp);
    v = StgInd_indirectee(updatee);

    // remove the update frame from the stack
    Sp = Sp + SIZEOF_StgUpdateFrame;
    
    if (GETTAG(v) != 0) {
        // updated by someone else: discard our value and use the
        // other one to increase sharing, but check the blocking
        // queues to see if any threads were waiting on this BLACKHOLE.
        R1 = v;
        foreign "C" checkBlockingQueues(MyCapability() "ptr",
                                        CurrentTSO "ptr") [R1];
        jump %ENTRY_CODE(Sp(0)) [R1];
    }

    // common case: it is still our BLACKHOLE
    if (v == CurrentTSO) {
        updateWithIndirection(updatee,
                              R1,
                              jump %ENTRY_CODE(Sp(0)) [R1]);
    }

    // The other cases are all handled by the generic code
    foreign "C" updateThunk (MyCapability() "ptr", CurrentTSO "ptr", 
                             updatee "ptr", R1 "ptr") [R1];

    jump %ENTRY_CODE(Sp(0)) [R1];
}

// Special update frame code for CAFs and eager-blackholed thunks: it
// knows how to update blackholes, but is distinct from
// stg_marked_upd_frame so that lazy blackholing won't treat it as the
// high watermark.
INFO_TABLE_RET (stg_bh_upd_frame, UPDATE_FRAME, UPD_FRAME_PARAMS)
{
    jump RET_LBL(stg_marked_upd_frame) [R1];
}

