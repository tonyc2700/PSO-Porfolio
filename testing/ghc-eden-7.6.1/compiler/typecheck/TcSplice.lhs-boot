\begin{code}
module TcSplice where
import HsSyn    ( HsSplice, HsBracket, HsQuasiQuote,
                  HsExpr, LHsType, LHsExpr, LPat, LHsDecl )
import Name     ( Name )
import NameSet  ( FreeVars )
import RdrName  ( RdrName )
import TcRnTypes( TcM, TcId )
import TcType   ( TcRhoType, TcType, TcKind )
import Annotations ( Annotation, CoreAnnTarget )
import qualified Language.Haskell.TH as TH

tcSpliceExpr :: HsSplice Name
             -> TcRhoType
             -> TcM (HsExpr TcId)

tcSpliceType :: HsSplice Name -> FreeVars -> TcM (TcType, TcKind)

tcBracket :: HsBracket Name 
          -> TcRhoType
          -> TcM (LHsExpr TcId)

tcSpliceDecls :: LHsExpr Name -> TcM [LHsDecl RdrName]

lookupThName_maybe :: TH.Name -> TcM (Maybe Name)

runQuasiQuoteDecl :: HsQuasiQuote RdrName -> TcM [LHsDecl RdrName]
runQuasiQuoteExpr :: HsQuasiQuote RdrName -> TcM (LHsExpr RdrName)
runQuasiQuoteType :: HsQuasiQuote RdrName -> TcM (LHsType RdrName)
runQuasiQuotePat  :: HsQuasiQuote RdrName -> TcM (LPat RdrName)
runAnnotation     :: CoreAnnTarget -> LHsExpr Name -> TcM Annotation
\end{code}
